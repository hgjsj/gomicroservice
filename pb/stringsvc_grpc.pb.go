// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: pb/stringsvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringSvcClient is the client API for StringSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringSvcClient interface {
	// Turn string to uppercase.
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
	// Get lenth of string.
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type stringSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewStringSvcClient(cc grpc.ClientConnInterface) StringSvcClient {
	return &stringSvcClient{cc}
}

func (c *stringSvcClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := c.cc.Invoke(ctx, "/pb.StringSvc/Uppercase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringSvcClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/pb.StringSvc/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringSvcServer is the server API for StringSvc service.
// All implementations must embed UnimplementedStringSvcServer
// for forward compatibility
type StringSvcServer interface {
	// Turn string to uppercase.
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
	// Get lenth of string.
	Count(context.Context, *CountRequest) (*CountResponse, error)
	mustEmbedUnimplementedStringSvcServer()
}

// UnimplementedStringSvcServer must be embedded to have forward compatible implementations.
type UnimplementedStringSvcServer struct {
}

func (UnimplementedStringSvcServer) Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uppercase not implemented")
}
func (UnimplementedStringSvcServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedStringSvcServer) mustEmbedUnimplementedStringSvcServer() {}

// UnsafeStringSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringSvcServer will
// result in compilation errors.
type UnsafeStringSvcServer interface {
	mustEmbedUnimplementedStringSvcServer()
}

func RegisterStringSvcServer(s grpc.ServiceRegistrar, srv StringSvcServer) {
	s.RegisterService(&StringSvc_ServiceDesc, srv)
}

func _StringSvc_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringSvcServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StringSvc/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringSvcServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringSvc_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringSvcServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StringSvc/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringSvcServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringSvc_ServiceDesc is the grpc.ServiceDesc for StringSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StringSvc",
	HandlerType: (*StringSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _StringSvc_Uppercase_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _StringSvc_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/stringsvc.proto",
}
