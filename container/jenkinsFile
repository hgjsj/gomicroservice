pipeline {
  // Run on an agent where we want to use Go
  agent any

  // Ensure the desired Go version is installed for all stages,
  // using the name defined in the Global Tool Configuration
  tools { go '1.20' }

  parameters {
      string(name: 'version', defaultValue: '1.0', description: 'version of code', trim: true)
  }
  stages {
    stage('Checkout project from git'){
      steps {
      sh 'rm -rf gomicroservice'
      sh 'git clone https://gitee.com/hgjsj01/gomicroservice.git'
      }
    }
    stage('Build go executable') {
      steps {
        dir("${env.WORKSPACE}/gomicroservice"){
          sh '''
              go env -w GO111MODULE=on
              go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct
              go build
            '''
          script {
            if (fileExists('go-microservice')) {
              echo "File go-microservice found!"
            } else {
              error("File go-microservice not found!")
            }
          }
        }
      }
    }

    stage('Transfer binary to building machine and build image'){
      steps {
        script {
            def remote = [:]
            remote.name = '30.129'
            remote.host = '192.168.30.129'
            remote.user = 'root'
            remote.password = '86782943'
            remote.allowAnyHosts = true
            sshCommand remote: remote, failOnError: true, command: "mkdir /opt/gomicroservice_build"
            sshPut remote: remote, failOnError: true, from: "${env.WORKSPACE}/gomicroservice/go-microservice", into: '/opt/gomicroservice_build/'
            sshPut remote: remote, failOnError: true, from: "${env.WORKSPACE}/gomicroservice/go-service.yml", into: '/opt/gomicroservice_build/'
            sshPut remote: remote, failOnError: true, from: "${env.WORKSPACE}/gomicroservice/container/Dockerfile", into: '/opt/gomicroservice_build/'
            sshCommand remote: remote, failOnError: true, command: "cd /opt/gomicroservice_build; podman build -t go-microservice:${version} -f ./ .; podman save -o  go-microservice-${version}.tar go-microservice:${version}; ctr i import go-microservice-${version}.tar"
            sshRemove  remote: remote, failOnError: true, path: '/opt/gomicroservice_build'
        }
      }
    }
  }
}